//=================================================================================
//
//    Animation header
//    Author : Lin He                                        作成日 : 2018/01/14
//
//  　現在アニメーションは戦闘中の攻撃アニメーションだけ
//=================================================================================
#ifndef _ANIMATION_H_
#define _ANIMATION_H_

#include "../Base/DirectX9.h"
#include "TextureManager.h"

//攻撃アニメーションのテクスチャー
enum ANIM_ENUM
{
	ANIM_ATTACK_PLAYER = 0,
	ANIM_ATTACK_ENENMY,
	ANIM_SKILL_EARTH_ATTACK,
	ANIM_SKILL_FIRE_ATTACK,
	ANIM_SKILL_WIND_ATTACK,
	ANIM_SKILL_WATER_ATTACK,
	ANIM_ALCHEMY_EARTH_STRIKE,
	ANIM_ALCHEMY_WATER_HEAL,
	ANIM_MAX
};

//攻撃アニメーションのスプライトシート
static const SpriteSheet anim_texture_data[ANIM_MAX] = {
	 L"Resource/Texture/normal_attack.png", 256, 64, 1, 4,
	 L"Resource/Texture/enemy_attack.png", 256, 64, 1, 4,
	 L"Resource/Texture/earth_attack.png", 256, 64, 1, 4,
	 L"Resource/Texture/fire_attack.png", 256, 64, 1, 4,
	 L"Resource/Texture/wind_attack.png", 256, 64, 1, 4,
	 L"Resource/Texture/water_attack.png", 256, 64, 1, 4,
	 L"Resource/Texture/earth_strike.png", 256, 64, 1, 4,
	 L"Resource/Texture/water_heal.png", 320, 64, 1, 5,
};

//*****************************************************************************
// Animation Class
//
// アニメーションを再生するクラス
// アニメーションは、アニメーション座標を中心に、フレームごとに画像を入れ替わることで実現する
//*****************************************************************************
class Animation
{
public:
	//アニメーションの状態を示すステート
	enum ANIM_STATE
	{
		ANIM_STATE_NULL,
		ANIM_STATE_PLAY,
		ANIM_STATE_STOP
	};

public:
	//=================================================================
	// [ アニメーション初期化関数 ]
	//
	//　アニメーションを初期化する（プレイしない状態）
	//=================================================================
	void Init();

	//=================================================================
	// [ アニメーションプレイ初期化関数 ]
	//
	// [ Parameters ]
	// [ LPDIRECT3DTEXTURE9 ]	texture 		: アニメーションを行うテクスチャー
	// [ int ]					anim_index_max	: アニメーションの画像が何枚あるか
	// [ float ]				pos_x,pos_y		: アニメーションの座標
	//
	// [ Details ]
	// アニメーションのプレイを初期化する。その後アニメーションは自動にプレイする。
	// 何フレームごとに画像を切り替えるかを設定する
	//=================================================================
	void InitPlay(LPDIRECT3DTEXTURE9 texture, int anim_index_max, float pos_x, float pos_y);

	//=================================================================
	// [ アニメーションプレイ関数 ]
	//
	//　アニメーションをプレイする。フレームごとに画像を入れ替わる
	//=================================================================
	void Play();

	//=================================================================
	// [ アニメーション描画関数 ]
	//=================================================================
	void Draw();

	//=================================================================
	// [ アニメーションステート取得関数 ]
	//
	// [ Return ]
	// [ ANIM_STATE ]	: アニメーションの状態を示すステート
	//=================================================================
	ANIM_STATE GetState();

//-------------------------------------------------------------------------

private:

	//アニメーションのX座標
	float pos_x_;
	//アニメーションのY座標
	float pos_y_;

	//アニメーションのテクスチャー
	LPDIRECT3DTEXTURE9 texture_;

	//カウント数
	int count_;
	//カウント数MAX
	int count_max_;
	//現在使ってる画像のインデックス
	int anim_index_;
	//このアニメーションには何枚の画像があるか
	int anim_index_max_;
	//描画するUV座標がｘ軸で毎回どれくらい変えますか
	float uv_coord_delta_x_;
	//現在アニメーションのステート
	ANIM_STATE state_;
};

//*****************************************************************************
// AnimationManager Class
//
// アニメーションを管理するクラス
// すべてのアニメーションの初期化と終了化を行う、特定のアニメーションをプレイする機能がある
//*****************************************************************************
class AnimationManager
{
public:
	//=================================================================
	// [ AnimationManager初期化関数 ]
	//
	//　すべてのアニメーションテクスチャーを読み込み、アニメーションを初期化する
	//=================================================================
	void Init();

	//=================================================================
	// [ AnimationManager終了化関数 ]
	//=================================================================
	void Uninit();

	//=================================================================
	// [ 特定のアニメーションをプレイする関数 ]
	//
	// [ Parameters ]
	// [ int ]	id 				: プレイしたいアニメーションのID
	// [ float]	pos_x, pos_y	: アニメーションをプレイしたい座標
	//
	// [ Return ]
	// [ bool ]					: アニメーションが終わったらTureを返す
	//=================================================================
	bool PlayAnimation(int id, float pos_x, float pos_y);

	//=================================================================
	// [ AnimationManager描画関数 ]
	// 特定のアニメーションを描画する
	//=================================================================
	void Draw();

//-------------------------------------------------------------------------

private:

	//処理するアニメーション、今の攻撃アニメーションは一つだけなので一つでいい（複数に変える可能性がある）
	Animation anim_;

	//すべてのアニメーションテクスチャーの配列
	LPDIRECT3DTEXTURE9 anim_textures[ANIM_MAX];
};

#endif